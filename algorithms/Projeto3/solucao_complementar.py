# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProgramacaoAplicadaGrupo2
                                 A QGIS plugin
 Solução do Grupo 2
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-04-28
        copyright            : (C) 2024 by Grupo 2
        email                : analivia.200012@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Grupo 2'
__date__ = '2024-05-27'
__copyright__ = '(C) 2024 by Grupo 2'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterField,
                       QgsFeature,
                       QgsFeatureSink,
                       QgsProcessingMultiStepFeedback,
                       QgsProcessingContext,
                       QgsProcessingParameterFeatureSink,
                       QgsFeedback,
                       QgsVectorLayer,
                       QgsProcessingException,
                       QgsField,
                       QgsFields,
                       QgsSpatialIndex
                        )
from PyQt5.QtCore import QVariant
from qgis import processing

class ReambulacaoComplementarAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    PONTOS_GPS = "PONTOS_GPS"
    CAMADA_DIA_1 = "CAMADA_DIA_1"
    CAMPOS_IGNORADOS = "CAMPOS_IGNORADOS"
    CHAVE_PRIMARIA = "CHAVE_PRIMARIA"
    TOLERANCIA = "TOLERANCIA"
    CAMADA_DIA_2 = "CAMADA_DIA_2"
    OUTPUT = "OUTPUT"

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.PONTOS_GPS,
                self.tr("Insira a camada com os pontos obtidos pelo GPS do operador"),
                types=[QgsProcessing.TypeVectorPoint]
            )
        )

        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.CAMADA_DIA_1,
                self.tr("Insira a camada do dia 1"),
                types=[QgsProcessing.TypeVectorPoint, QgsProcessing.TypeVectorLine, QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.CAMADA_DIA_2,
                self.tr("Insira a camada do dia 2"),
                types=[QgsProcessing.TypeVectorPoint, QgsProcessing.TypeVectorLine, QgsProcessing.TypeVectorPolygon]
            )
        )    

        self.addParameter(
            QgsProcessingParameterNumber(
                self.TOLERANCIA, 
                self.tr("Insira a distância de tolerância entre o caminho percorrido e as mudanças (em graus)"),
                type=QgsProcessingParameterNumber.Double
                )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.CHAVE_PRIMARIA,
                self.tr("Escolha o atributo correspondente à chave primária"),
                parentLayerParameterName=self.CAMADA_DIA_1,
                type=QgsProcessingParameterField.Any
            )
        )

        self.addParameter(
            QgsProcessingParameterField(
                self.CAMPOS_IGNORADOS,
                self.tr("Escolha os atributos a serem IGNORADOS"),
                parentLayerParameterName=self.CAMADA_DIA_1,
                type=QgsProcessingParameterField.Any,
                allowMultiple=True,
                optional=True
            )
        )    

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).

        # Output layers

        ##tem que ter uma logica a depender da camada de entrada, se a camada dos dias for ponto, o output tem que ser ponto, e por aí vai, acho que isso vamos ajeitar no processamento, mas só colocando aqui para lembrar

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT, 
                self.tr("Output"))
        )    
    
    def processAlgorithm(self, parameters, context, feedback):
        # Retrieve parameters
        pontos_gps_camada = self.parameterAsVectorLayer(parameters, self.PONTOS_GPS, context)
        camada_dia_1 = self.parameterAsVectorLayer(parameters, self.CAMADA_DIA_1, context)
        camada_dia_2 = self.parameterAsVectorLayer(parameters, self.CAMADA_DIA_2, context)
        tol = self.parameterAsDouble(parameters, self.TOLERANCIA, context)
        chave_primaria = self.parameterAsString(parameters, self.CHAVE_PRIMARIA, context)
        campos_ignorados = self.parameterAsFields(parameters, self.CAMPOS_IGNORADOS, context)

        # Checar se as camadas do dia 1 e do dia 2 tem mesmo tipo de geometria
        if camada_dia_1.wkbType() != camada_dia_2.wkbType():
            raise QgsProcessingException(self.tr("As camadas do dia 1 e do dia 2 devem ter o mesmo tipo de geometria."))

        currentStep = 0
        multiStepFeedback = (
            QgsProcessingMultiStepFeedback(3, feedback)
            if feedback is not None
            else None
        )     
        if multiStepFeedback is not None:
            multiStepFeedback.setCurrentStep(currentStep)
            multiStepFeedback.pushInfo(
                self.tr("Gerando uma linha cujos vértices são os pontos da camada de pontos GPS, seguindo a ordem da data de criação...")
            )

        # Converter pontos GPS para uma linha
        linha_gps_camada = self.pointstopath(pontos_gps_camada, context, feedback)

        # Buffer em torno da linha percorrida (GPS)
        linha_gps_buffer = self.buffer(linha_gps_camada, tol, context, feedback)
        linha_gps_buffer = next(linha_gps_buffer.getFeatures()).geometry()

        # Lista para armazenar os IDs das features fora do limite de tolerância
        ids_fora_do_limite = set()

        # Iterar sobre os features da camada do dia 2
        for feat_dia_2 in camada_dia_2.getFeatures():
            # Verificar se o buffer do feature do dia 2 intersecta com o buffer da linha GPS
            if feat_dia_2.geometry().intersects(linha_gps_buffer.geometry()):
                # Adicionar o ID à lista de IDs dentro do limite de tolerância
                ids_fora_do_limite.add(feat_dia_2[chave_primaria])

        # Iterar sobre os features da camada do dia 1
        for feat_dia_1 in camada_dia_1.getFeatures():
            # Verificar se o buffer do feature do dia 1 intersecta com o buffer da linha GPS
            if feat_dia_1.geometry().intersects(linha_gps_buffer.geometry()):
                # Adicionar o ID à lista de IDs dentro do limite de tolerância
                ids_fora_do_limite.add(feat_dia_1[chave_primaria])

        currentStep += 1
        if multiStepFeedback is not None:
            multiStepFeedback.setCurrentStep(currentStep)
            multiStepFeedback.pushInfo(
                self.tr("Proximo passo...")
            )


        geometry_type = camada_dia_1.wkbType()

        fields = QgsFields()
        fields.append(QgsField(chave_primaria, QVariant.String))
        fields.append(QgsField("tipo", QVariant.String))

        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context, fields, geometry_type, camada_dia_1.sourceCrs())

        dict_dia_1 = {feat[chave_primaria]: feat for feat in camada_dia_1.getFeatures()}
        dict_dia_2 = {feat[chave_primaria]: feat for feat in camada_dia_2.getFeatures()}

        # Iterar sobre os IDs fora do limite de tolerância
        for key in ids_fora_do_limite:
            if key in dict_dia_1:
                new_feat = QgsFeature(fields)
                new_feat.setGeometry(dict_dia_1[key].geometry())
                new_feat.setAttribute(chave_primaria, key)
                new_feat.setAttribute("tipo", "removida")
                sink.addFeature(new_feat, QgsFeatureSink.FastInsert)

            if key in dict_dia_2:
                new_feat = QgsFeature(fields)
                new_feat.setGeometry(dict_dia_2[key].geometry())
                new_feat.setAttribute(chave_primaria, key)
                new_feat.setAttribute("tipo", "adicionada")
                sink.addFeature(new_feat, QgsFeatureSink.FastInsert)

            # Verificar se o ID também está na camada do dia 2
            # Se estiver, verificar se houve modificação
            if key in dict_dia_1 and key in dict_dia_2:
                feat_dia_1 = dict_dia_1[key]
                feat_dia_2 = dict_dia_2[key]
                for field in feat_dia_1.fields().names():
                    # Verificar se o campo não está na lista de campos ignorados
                    if field not in campos_ignorados:
                        # Verificar se houve modificação no campo
                        if feat_dia_1[field] != feat_dia_2[field]:
                            new_feat = QgsFeature(fields)
                            new_feat.setGeometry(feat_dia_2.geometry())
                            new_feat.setAttribute(chave_primaria, key)
                            new_feat.setAttribute("tipo", "modificada")
                            sink.addFeature(new_feat, QgsFeatureSink.FastInsert)
                            break

        return {self.OUTPUT: dest_id}

    
    ##Essa parte é para colocarmos os processings utilizados na solução
    
    #processing.run("native:pointstopath", {'INPUT':'C:/Users/anali/OneDrive/Documentos/prog_apli_docs/proj3/dados_projeto3_2024.gpkg|layername=tracker','CLOSE_PATH':False,'ORDER_EXPRESSION':'"creation_time"','NATURAL_SORT':False,'GROUP_EXPRESSION':'','OUTPUT':'TEMPORARY_OUTPUT'})
    
    def pointstopath(self, camada: QgsVectorLayer, context: QgsProcessingContext = None, feedback: QgsFeedback =None) -> QgsVectorLayer:
            output = processing.run(
                "native:pointstopath",
                {
                    "INPUT": camada,
                    "CLOSE_PATH": False,
                    "ORDER_EXPRESSION":'"creation_time"',
                    "NATURAL_SORT": False,
                    "GROUP_EXPRESSION":'',
                    "OUTPUT": "memory:"
                },
                context=context,
                feedback = feedback
            )["OUTPUT"]
            return output
    
    #processing.run("native:buffer", {'INPUT':'C:/Users/anali/OneDrive/Documentos/prog_apli_docs/proj3/dados_projeto3_2024.gpkg|layername=tracker','DISTANCE':10,'SEGMENTS':5,'END_CAP_STYLE':0,'JOIN_STYLE':0,'MITER_LIMIT':2,'DISSOLVE':False,'OUTPUT':'TEMPORARY_OUTPUT'})

    def buffer(self, camada:QgsVectorLayer, valor: float, context: QgsProcessingContext = None, feedback: QgsFeedback =None) -> QgsVectorLayer:
        output = processing.run(
            "native:buffer",
            {
                "INPUT": camada,
                "DISTANCE": valor,
                "OUTPUT": "memory:"
            },
            context=context,
            feedback = feedback
        )["OUTPUT"]
        return output   
    
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Solução complementar do projeto 3'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Projeto 3'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ReambulacaoComplementarAlgorithm()
