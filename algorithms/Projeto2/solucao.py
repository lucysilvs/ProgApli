# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProgramacaoAplicadaGrupo2
                                 A QGIS plugin
 Solução do Grupo 2
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-04-28
        copyright            : (C) 2024 by Grupo 2
        email                : analivia.200012@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Grupo 2'
__date__ = '2024-04-28'
__copyright__ = '(C) 2024 by Grupo 2'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterRasterLayer,
                       QgsVectorLayer,
                       QgsProcessingException,
                       QgsFeatureRequest,
                       QgsProject,
                       QgsFeature,
                       QgsProcessingMultiStepFeedback,
                       QgsProcessingParameterVectorDestination,
                       QgsProcessingContext,
                       QgsFeedback
                        )
from qgis import processing


class DadosMDTAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    CURVA_NIVEL = 'CURVA_NIVEL'
    MDT = "MDT"
    PISTA_POUSO_PONTO = "PISTA_POUSO_PONTO"
    PISTA_POUSO_LINHA = "PISTA_POUSO_LINHA"
    PISTA_POUSO_AREA = "PISTA_POUSO_AREA"
    ESCALA = "ESCALA"
    CURVA_NIVEL_OUTPUT = "CURVA_NIVEL_OUTPUT"
    PISTA_POUSO_PONTO_OUTPUT = "PISTA_POUSO_PONTO_OUTPUT"
    PISTA_POUSO_LINHA_OUTPUT = "PISTA_POUSO_LINHA_OUTPUT"
    PISTA_POUSO_AREA_OUTPUT = "PISTA_POUSO_AREA_OUTPUT"

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.MDT,
                self.tr("Insira a camada com o MDT"),
            )
        )

        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.CURVA_NIVEL,
                self.tr("Insira a camada de curva de nível"),
                types=[QgsProcessing.TypeVectorLine]
            )
        )

        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.PISTA_POUSO_PONTO,
                self.tr("Insira a camada de pista de pouso (ponto)"),
                types=[QgsProcessing.TypeVectorPoint]
            )
        )


        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.PISTA_POUSO_LINHA,
                self.tr("Insira a camada de pista de pouso (linha)"),
                types=[QgsProcessing.TypeVectorLine]
            )
        )
        

        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.PISTA_POUSO_AREA,
                self.tr("Insira a camada de pista de pouso (área)"),
                types=[QgsProcessing.TypeVectorPolygon]
            )
        )

        # Adiciona a ComboBox de escalas
        self.addParameter(
            QgsProcessingParameterEnum(
                name=self.ESCALA,
                description=self.tr("Selecione a escala"),
                options=['1:25.000', '1:50.000', '1:100.000', '1:250.000']
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).

        # Output layers
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.CURVA_NIVEL_OUTPUT,
                self.tr("Camada de Curvas de Nível Processada")
            )
        )

        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.PISTA_POUSO_PONTO_OUTPUT,
                self.tr("Camada ponto pista de pouso com altitude preenchida")
            )
        )

        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.PISTA_POUSO_LINHA_OUTPUT,
                self.tr("Camada ponto pista de pouso com altitude preenchida")
            )
        )

        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.PISTA_POUSO_AREA_OUTPUT,
                self.tr("Camada ponto pista de pouso com altitude preenchida")
            )
        )
        
    
    
    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        mdt_camada = self.parameterAsRasterLayer(parameters, self.MDT, context)
        curvas_nivel_camada = self.parameterAsVectorLayer(parameters, self.CURVA_NIVEL, context)
        pista_pouso_ponto_camada = self.parameterAsVectorLayer(parameters, self.PISTA_POUSO_PONTO, context)
        pista_pouso_linha_camada = self.parameterAsVectorLayer(parameters, self.PISTA_POUSO_LINHA, context)
        pista_pouso_area_camada = self.parameterAsVectorLayer(parameters, self.PISTA_POUSO_AREA, context)
        escala = self.parameterAsString(parameters, self.ESCALA, context)
        camada_curva_nivel_saida = self.parameterAsVectorLayer(parameters, self.CURVA_NIVEL_OUTPUT, context)
        pista_pouso_ponto_output = self.parameterAsVectorLayer(parameters, self.PISTA_POUSO_PONTO_OUTPUT, context)
        pista_pouso_linha_output = self.parameterAsVectorLayer(parameters, self.PISTA_POUSO_LINHA_OUTPUT, context)
        pista_pouso_area_output = self.parameterAsVectorLayer(parameters, self.PISTA_POUSO_AREA_OUTPUT, context)

        currentStep = 0
        multiStepFeedback = (
            QgsProcessingMultiStepFeedback(3, feedback)
            if feedback is not None
            else None
        )     
        if multiStepFeedback is not None:
            multiStepFeedback.setCurrentStep(currentStep)
            multiStepFeedback.pushInfo(
                self.tr("Gerando nova camada, apenas com as curvas de nível adequadas à escala e com divisão entre normal e mestra...")
            )

        # Mapear índices para valores de escala
        indice_escala = {0: '1:25.000', 1: '1:50.000', 2: '1:100.000', 3: '1:250.000'}

        # Recuperar o índice selecionado
        indice_selecionado = parameters[self.ESCALA]

        # Recuperar o valor da escala correspondente ao índice selecionado
        if indice_selecionado in indice_escala:
            escala = indice_escala[indice_selecionado]
        else:
            # Índice inválido
            raise QgsProcessingException("Índice de escala inválido selecionado: {}".format(indice_selecionado))

        # Determinar a equidistância adequada com base na escala selecionada
        if escala == '1:25.000':
            equidistancia = 10
            multiplo_cota = 5 * (equidistancia)
        elif escala == '1:50.000':
            equidistancia = 20
            multiplo_cota = 5 * (equidistancia)
        elif escala == '1:100.000':
            equidistancia = 50
            multiplo_cota = 5 * (equidistancia)
        elif escala == '1:250.000':
            equidistancia = 100
            multiplo_cota = 5 * (equidistancia)
        else:
            # Escala inválida
            raise QgsProcessingException("Escala inválida selecionada: {}".format(escala))
        # Obter os valores mínimo e máximo da coluna de cota da tabela de atributos
        idx_cota = curvas_nivel_camada.fields().lookupField('cota')  # Obtém o índice do campo 'cota'
        max_cota =  curvas_nivel_camada.maximumValue(idx_cota)
        
        # Criar lista de valores de cota com base na equidistância
        valores_cota = list(range(0, max_cota + 1, equidistancia))

        # Filtrar os recursos da camada de curva de nível para manter apenas os valores de cota adequados
        expression = "\"cota\" IN ({})".format(','.join(map(str, valores_cota)))
        curvas_nivel_filtradas = curvas_nivel_camada.getFeatures(QgsFeatureRequest().setFilterExpression(expression))

        # Criar camada de curva de nível filtrada
        nova_camada = QgsVectorLayer("LineString?crs={}".format(curvas_nivel_camada.crs().authid()), "Curvas de Nível", "memory")
        provider = nova_camada.dataProvider()

        # Adicionar atributos à camada
        fields = curvas_nivel_camada.fields().toList()
        provider.addAttributes(fields)
        nova_camada.updateFields()

        # Adicionar recursos filtrados à camada
        for feature in curvas_nivel_filtradas:
            # Adicionar o recurso à camada
            nova_feature = QgsFeature(feature)
            # Verificar se o valor de cota é um múltiplo de multiplo_cota
            if nova_feature['cota'] % multiplo_cota == 0:
                # Se for, definir o valor de índice como 1
                nova_feature.setAttribute('indice', 1)
            else:
                # Caso contrário, definir o valor de índice como 2
                nova_feature.setAttribute('indice', 2)
            provider.addFeature(nova_feature)

        camada_curva_nivel_saida = nova_camada

        # Adicionar camada resultante ao projeto do QGIS
        QgsProject.instance().addMapLayer(camada_curva_nivel_saida)

        currentStep += 1
        if multiStepFeedback is not None:
            multiStepFeedback.setCurrentStep(currentStep)
            multiStepFeedback.pushInfo(
                self.tr("Amostrando camada raster para obter altitude das pistas de pouso...")
            )

        ####################### CAMADA PONTO DA PISTA DE POUSO #######################  
        pista_pouso_ponto_output = self.processar_camada(pista_pouso_ponto_camada, mdt_camada, context)
        # Adicionar camada resultante ao projeto do QGIS
        QgsProject.instance().addMapLayer(pista_pouso_ponto_output)
        pista_pouso_ponto_output.setName('pista_pouso_ponto_output')

        ####################### CAMADA LINHA DA PISTA DE POUSO #######################

        pista_pouso_linha_output = self.centroids(pista_pouso_linha_camada, context)
        pista_pouso_linha_output = self.processar_camada(pista_pouso_linha_output, mdt_camada, context)
        # Adicionar camada resultante ao projeto do QGIS
        QgsProject.instance().addMapLayer(pista_pouso_linha_output)
        pista_pouso_linha_output.setName('pista_pouso_linha_output')

        ####################### CAMADA AREA DA PISTA DE POUSO ####################### 

        pista_pouso_area_output = self.centroids(pista_pouso_area_camada, context)
        pista_pouso_area_output = self.processar_camada(pista_pouso_area_output, mdt_camada, context)
        # Adicionar camada resultante ao projeto do QGIS
        QgsProject.instance().addMapLayer(pista_pouso_area_output)
        pista_pouso_area_output.setName('pista_pouso_area_output')

        # Retornar o resultado do algoritmo
        return {self.CURVA_NIVEL_OUTPUT: camada_curva_nivel_saida, 
                self.PISTA_POUSO_PONTO_OUTPUT: pista_pouso_ponto_output, 
                self.PISTA_POUSO_LINHA_OUTPUT: pista_pouso_linha_output, 
                self.PISTA_POUSO_AREA_OUTPUT: pista_pouso_area_output}
    
    
    #processing.run("native:rastersampling", {'INPUT':'C:/Users/anali/OneDrive/Documentos/prog_apli_docs/proj2/dados_projeto2_2024.gpkg|layername=infra_pista_pouso_p','RASTERCOPY':'C:/Users/anali/OneDrive/Documentos/prog_apli_docs/proj2/MDT_Projeto2.tif','COLUMN_PREFIX':'SAMPLE_','OUTPUT':'TEMPORARY_OUTPUT'})
    
    def rastersampling(self, camada: QgsVectorLayer, camada_raster: str, context: QgsProcessingContext = None, feedback: QgsFeedback =None) -> QgsVectorLayer:
            output = processing.run(
                "native:rastersampling",
                {
                    "INPUT": camada,
                    "RASTERCOPY": camada_raster,
                    'COLUMN_PREFIX':'altitude',
                    "OUTPUT": "memory:"
                },
                context=context,
                feedback = feedback
            )["OUTPUT"]
            return output
    
    #processing.run("native:deletecolumn", {'INPUT':'memory://MultiPoint?crs=EPSG:4674&field=fid:long(0,0)&field=nome:string(255,0)&field=tipo:integer(0,0)&field=revestimento:integer(0,0)&field=uso_pista:integer(0,0)&field=situacao_fisica:integer(0,0)&field=altitude:double(0,0)&field=altitude1:double(0,0)&uid={b5fb1db1-5908-4297-afe4-70a680417b25}','COLUMN':['altitude'],'OUTPUT':'TEMPORARY_OUTPUT'})

    def deletecolumn(self, camada: QgsVectorLayer, context: QgsProcessingContext = None, feedback: QgsFeedback =None) -> QgsVectorLayer:
            output = processing.run(
                "native:deletecolumn",
                {
                    "INPUT": camada,
                    "COLUMN": ['altitude'],
                    "OUTPUT": "memory:"
                },
                context=context,
                feedback = feedback
            )["OUTPUT"]
            return output
    
    #processing.run("native:renametablefield", {'INPUT':'memory://MultiPoint?crs=EPSG:4674&field=fid:long(0,0)&field=nome:string(255,0)&field=tipo:integer(0,0)&field=revestimento:integer(0,0)&field=uso_pista:integer(0,0)&field=situacao_fisica:integer(0,0)&field=altitude1:double(0,0)&uid={3cfc3882-ea41-4fe3-80cd-ca7d23f212e4}','FIELD':'altitude1','NEW_NAME':'altitude','OUTPUT':'TEMPORARY_OUTPUT'})

    def renametablefield(self, camada: QgsVectorLayer, context: QgsProcessingContext = None, feedback: QgsFeedback =None) -> QgsVectorLayer:
            output = processing.run(
                "native:renametablefield",
                {
                    "INPUT": camada,
                    'FIELD':'altitude1',
                    'NEW_NAME':'altitude',
                    "OUTPUT": "memory:"
                },
                context=context,
                feedback = feedback
            )["OUTPUT"]
            return output
    
    #processing.run("native:centroids", {'INPUT':'C:/Users/anali/OneDrive/Documentos/prog_apli_docs/proj2/dados_projeto2_2024.gpkg|layername=infra_pista_pouso_l','ALL_PARTS':False,'OUTPUT':'TEMPORARY_OUTPUT'})

    def centroids(self, camada: QgsVectorLayer, context: QgsProcessingContext = None, feedback: QgsFeedback =None) -> QgsVectorLayer:
            output = processing.run(
                "native:centroids",
                {
                    "INPUT": camada,
                    "ALL_PARTS": False,
                    "OUTPUT": "memory:"
                },
                context=context,
                feedback = feedback
            )["OUTPUT"]
            return output
    
    def processar_camada(self,camada, mdt_camada, context):
        # Chama a função rastersampling para obter a camada de pontos pista_pouso_ponto_output
        output = self.rastersampling(camada, mdt_camada, context)

        # Arredonda os valores da coluna pista_pouso_ponto_output para uma casa decimal
        for feature in output.getFeatures():
            # Obter o valor da coluna altitude1
            valor_amostrado = feature.attribute('altitude1')
            # Verificar se o valor é do tipo float
            if isinstance(valor_amostrado, float):
                # Arredondar para uma casa decimal
                novo_valor_amostrado = round(valor_amostrado, 1)
                # Atualizar o valor da coluna altitude1
                feature.setAttribute('altitude1', novo_valor_amostrado)
                # Salvar as alterações
                output.dataProvider().changeAttributeValues({feature.id(): {feature.fieldNameIndex('altitude1'): novo_valor_amostrado}}) 

        # Remover coluna e renomear campo
        output = self.deletecolumn(output, context)
        output = self.renametablefield(output, context)

        # Retornar a camada modificada
        return output


    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Solução do projeto 2'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Projeto 2'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return DadosMDTAlgorithm()
